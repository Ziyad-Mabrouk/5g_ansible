---
- name: Setup second fit node on R2Lab
  hosts: faraday
  vars:
    fit_node: "{{ groups['fit_nodes'][1] }}"
    fit_number: "{{ hostvars[fit_node].fit_number }}"
    fit_usrp: "{{ hostvars[fit_node].fit_usrp }}"
  roles:
    - role: scenarios/interference/setup
  when: hostvars[groups['faraday'][0]].interference_usrp == 'fit'

- name: Setup interference USRP on R2Lab
  hosts: faraday
  vars:
    rru: "{{ hostvars[groups['faraday'][0]].interference_usrp }}"
  roles:
    - role: r2lab/rru
  when: hostvars[groups['faraday'][0]].interference_usrp in ['n300', 'n320']

- name: Connect first UE on R2Lab to the 5G network
  hosts: faraday
  roles:
    - role: r2lab/ue/connect
      vars:
        ue: "{{ groups['qhats'][0] }}"

- name: Run Iperf test
  hosts: faraday
  gather_facts: false
  tasks:
    - name: Start bidirectional iperf3 on first UE in background for 5 minutes
      shell: >
        ssh root@{{ groups['qhats'][0] }} 
        'iperf3 -c {{ hostvars[groups["qhats"][0]].upf_ip }} --bidir -t 300 -J log_interference_test.json'
      delegate_to: faraday.inria.fr
      async: 1800
      poll: 0
      register: iperf_job

    - name: Wait 1 minute before running noise generator
      wait_for:
        timeout: 60

- name: Run noise generator from fit node for 100 seconds
  hosts: faraday
  vars:
    node: "{{ groups['fit_nodes'][1] }}"
    time: 100
  roles:
    - role: scenarios/interference/run
  when: hostvars[groups['faraday'][0]].interference_usrp == 'fit'

- name: Run noise generator from USRP for 100 seconds
  hosts: faraday
  vars:
    node: "{{ hostvars[groups['faraday'][0]].interference_usrp }}"
    time: 100
  roles:
    - role: scenarios/interference/run
  when: hostvars[groups['faraday'][0]].interference_usrp in ['n300', 'n320']

- name: Wait for Iperf test to finish
  hosts: faraday
  gather_facts: false
  tasks:
    - name: Wait for iperf jobs
      async_status:
        jid: "{{ item.ansible_job_id }}"
      register: result
      until: result.finished
      retries: 100
      delay: 10
      loop: "{{ down_job_1.results }}"
      loop_control:
        label: "{{ item.item }}"
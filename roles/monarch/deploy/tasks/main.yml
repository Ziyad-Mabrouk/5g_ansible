---
- import_tasks: persist_data.yml

- name: Clone 5G-Monarch repo
  git:
    repo: "{{ repo_url }}"
    dest: "{{ repo_dest }}"
    version: "{{ branch }}"
    update: yes
    force: yes 

- name: Label {{ groups['monitor_node'][0] }} for Monarch scheduling
  command: kubectl label node {{ groups['monitor_node'][0] }} monarch-node=true --overwrite
  changed_when: false

- name: Copy Kyverno policy
  copy:
    dest: /tmp/monarch-force-node.yaml
    content: |
      apiVersion: kyverno.io/v1
      kind: ClusterPolicy
      metadata:
        name: monarch-force-node
      spec:
        rules:
          - name: add-monarch-node-selector
            match:
              resources:
                kinds: ["Pod"]
                namespaces: ["monarch"]
            mutate:
              patchStrategicMerge:
                spec:
                  nodeSelector:
                    monarch-node: "true"

- name: Apply Kyverno policy
  command: kubectl apply -f /tmp/monarch-force-node.yaml

- name: Ensure {{ monarch_ns }} namespace exists
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: "{{ monarch_ns }}"

- name: Patch namespace with default nodeSelector to force scheduling on labeled node
  kubernetes.core.k8s:
    state: patched
    kind: Namespace
    name: "{{ monarch_ns }}"
    merge_type: merge
    definition:
      metadata:
        annotations:
          scheduler.kubernetes.io/node-selector: "monarch-node=true"

- name: Get IP of node {{ groups['monitor_node'][0] }}
  command: kubectl get node {{ groups['monitor_node'][0] }} -o jsonpath='{.status.addresses[?(@.type=="InternalIP")].address}'
  register: monarch_node_ip_result

- name: Set monarch_node_ip fact
  set_fact:
    monarch_node_ip: "{{ monarch_node_ip_result.stdout }}"

- name: Patch NODE_IP in .env
  lineinfile:
    path: "{{ repo_dest }}/.env"
    regexp: '^NODE_IP=.*'
    line: 'NODE_IP="{{ monarch_node_ip }}"'
    create: yes

- name: Install Python requirements
  ansible.builtin.pip:
    requirements: "{{ repo_dest }}/requirements.txt"
    executable: pip3

- name: Deploy Monarch External Components (SO, NFVO)
  ansible.builtin.debug:
    msg: "Starting deployment of Monarch external components..."

- import_tasks: deploy_external.yml

- name: Append nodeSelector for MongoDB (exact indent, end of file)
  blockinfile:
    path: "{{ repo_dest }}/data_store/mongodb/mongodb-deployment.yaml"
    marker: "# {mark} ANSIBLE MANAGED BLOCK: NodeSelector for MongoDB"
    insertafter: EOF
    block: |
      # fixing indentation
            nodeSelector:
              kubernetes.io/hostname: {{ groups['monitor_node'][0] }}

- name: Deploy Monarch Core Components (Data, Monitoring)"
  ansible.builtin.debug:
    msg: "Starting deployment of Monarch core components..."

- import_tasks: deploy_core.yml

- name: Deploy Monarch NSS Components (NSSDC, Prometheus)
  ansible.builtin.debug:
    msg: "Starting deployment of Monarch NSS components..."

- import_tasks: deploy_nss.yml

- name: Access Grafana Dashboard
  ansible.builtin.debug:
    msg: |
      To access the Grafana Dashboard, follow these chained SSH port forwarding steps:

      Step 1: On your local machine, SSH into Duckburg with remote port forwarding
        >>>
        ssh -L 8888:localhost:8888 -p 10022 ziyad@duckburg.net.in.tum.de
        >>>

      Step 2: From inside Duckburg, forward {{ groups['monitor_node'][0] }}:32005 to localhost:8888
        >>>
        ssh -L 8888:localhost:32005 root@{{ groups['monitor_node'][0] }}
        >>>

      Step 3: Now open your browser and go to http://localhost:8888 to access Grafana.

      Grafana credentials:
        User: admin
        Password: monarch-operator
